// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/superosystem/trainingsystem-backend/src/domain"
	mock "github.com/stretchr/testify/mock"
)

// MentorUsecase is an autogenerated mock type for the MentorUsecase type
type MentorUsecase struct {
	mock.Mock
}

// FindAll provides a mock function with given fields:
func (_m *MentorUsecase) FindAll() (*[]domain.Mentor, error) {
	ret := _m.Called()

	var r0 *[]domain.Mentor
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]domain.Mentor, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]domain.Mentor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Mentor)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *MentorUsecase) FindById(id string) (*domain.Mentor, error) {
	ret := _m.Called(id)

	var r0 *domain.Mentor
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Mentor, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Mentor); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Mentor)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgotPassword provides a mock function with given fields: forgotPassword
func (_m *MentorUsecase) ForgotPassword(forgotPassword *domain.MentorForgotPassword) error {
	ret := _m.Called(forgotPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.MentorForgotPassword) error); ok {
		r0 = rf(forgotPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: mentorAuth
func (_m *MentorUsecase) Login(mentorAuth *domain.MentorAuth) (interface{}, error) {
	ret := _m.Called(mentorAuth)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.MentorAuth) (interface{}, error)); ok {
		return rf(mentorAuth)
	}
	if rf, ok := ret.Get(0).(func(*domain.MentorAuth) interface{}); ok {
		r0 = rf(mentorAuth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.MentorAuth) error); ok {
		r1 = rf(mentorAuth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: mentorAuth
func (_m *MentorUsecase) Register(mentorAuth *domain.MentorRegister) error {
	ret := _m.Called(mentorAuth)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.MentorRegister) error); ok {
		r0 = rf(mentorAuth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: id, updateMentor
func (_m *MentorUsecase) Update(id string, updateMentor *domain.MentorUpdateProfile) error {
	ret := _m.Called(id, updateMentor)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.MentorUpdateProfile) error); ok {
		r0 = rf(id, updateMentor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: updatePassword
func (_m *MentorUsecase) UpdatePassword(updatePassword *domain.MentorUpdatePassword) error {
	ret := _m.Called(updatePassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.MentorUpdatePassword) error); ok {
		r0 = rf(updatePassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMentorUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMentorUsecase creates a new instance of MentorUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMentorUsecase(t mockConstructorTestingTNewMentorUsecase) *MentorUsecase {
	mock := &MentorUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
