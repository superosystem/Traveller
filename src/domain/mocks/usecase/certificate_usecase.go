// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/superosystem/trainingsystem-backend/src/domain"
	mock "github.com/stretchr/testify/mock"
)

// CertificateUsecase is an autogenerated mock type for the CertificateUsecase type
type CertificateUsecase struct {
	mock.Mock
}

// GenerateCert provides a mock function with given fields: data
func (_m *CertificateUsecase) GenerateCert(data *domain.Certificate) ([]byte, error) {
	ret := _m.Called(data)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Certificate) ([]byte, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(*domain.Certificate) []byte); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Certificate) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCertificateUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCertificateUsecase creates a new instance of CertificateUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCertificateUsecase(t mockConstructorTestingTNewCertificateUsecase) *CertificateUsecase {
	mock := &CertificateUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
