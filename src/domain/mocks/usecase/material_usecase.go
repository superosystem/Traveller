// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/superosystem/trainingsystem-backend/src/domain"
	mock "github.com/stretchr/testify/mock"
)

// MaterialUsecase is an autogenerated mock type for the MaterialUsecase type
type MaterialUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: materialDomain
func (_m *MaterialUsecase) Create(materialDomain *domain.Material) error {
	ret := _m.Called(materialDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Material) error); ok {
		r0 = rf(materialDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: materialId
func (_m *MaterialUsecase) Delete(materialId string) error {
	ret := _m.Called(materialId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(materialId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Deletes provides a mock function with given fields: moduleId
func (_m *MaterialUsecase) Deletes(moduleId string) error {
	ret := _m.Called(moduleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(moduleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: materialId
func (_m *MaterialUsecase) FindById(materialId string) (*domain.Material, error) {
	ret := _m.Called(materialId)

	var r0 *domain.Material
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Material, error)); ok {
		return rf(materialId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Material); ok {
		r0 = rf(materialId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Material)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(materialId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: materialId, materialDomain
func (_m *MaterialUsecase) Update(materialId string, materialDomain *domain.Material) error {
	ret := _m.Called(materialId, materialDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.Material) error); ok {
		r0 = rf(materialId, materialDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMaterialUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMaterialUsecase creates a new instance of MaterialUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMaterialUsecase(t mockConstructorTestingTNewMaterialUsecase) *MaterialUsecase {
	mock := &MaterialUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
