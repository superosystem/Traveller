// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/superosystem/trainingsystem-backend/src/domain"
	helper "github.com/superosystem/trainingsystem-backend/src/helper"

	mock "github.com/stretchr/testify/mock"
)

// MenteeAssignmentUsecase is an autogenerated mock type for the MenteeAssignmentUsecase type
type MenteeAssignmentUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: assignmentDomain
func (_m *MenteeAssignmentUsecase) Create(assignmentDomain *domain.MenteeAssignment) error {
	ret := _m.Called(assignmentDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.MenteeAssignment) error); ok {
		r0 = rf(assignmentDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: assignmentId
func (_m *MenteeAssignmentUsecase) Delete(assignmentId string) error {
	ret := _m.Called(assignmentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(assignmentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByAssignmentId provides a mock function with given fields: assignmentId, pagination
func (_m *MenteeAssignmentUsecase) FindByAssignmentId(assignmentId string, pagination helper.Pagination) (*helper.Pagination, error) {
	ret := _m.Called(assignmentId, pagination)

	var r0 *helper.Pagination
	var r1 error
	if rf, ok := ret.Get(0).(func(string, helper.Pagination) (*helper.Pagination, error)); ok {
		return rf(assignmentId, pagination)
	}
	if rf, ok := ret.Get(0).(func(string, helper.Pagination) *helper.Pagination); ok {
		r0 = rf(assignmentId, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helper.Pagination)
		}
	}

	if rf, ok := ret.Get(1).(func(string, helper.Pagination) error); ok {
		r1 = rf(assignmentId, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: assignmentId
func (_m *MenteeAssignmentUsecase) FindById(assignmentId string) (*domain.MenteeAssignment, error) {
	ret := _m.Called(assignmentId)

	var r0 *domain.MenteeAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.MenteeAssignment, error)); ok {
		return rf(assignmentId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.MenteeAssignment); ok {
		r0 = rf(assignmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MenteeAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(assignmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByMenteeId provides a mock function with given fields: menteeId
func (_m *MenteeAssignmentUsecase) FindByMenteeId(menteeId string) ([]domain.MenteeAssignment, error) {
	ret := _m.Called(menteeId)

	var r0 []domain.MenteeAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.MenteeAssignment, error)); ok {
		return rf(menteeId)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.MenteeAssignment); ok {
		r0 = rf(menteeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MenteeAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(menteeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMenteeAssignmentEnrolled provides a mock function with given fields: menteeId, assignmentId
func (_m *MenteeAssignmentUsecase) FindMenteeAssignmentEnrolled(menteeId string, assignmentId string) (*domain.MenteeAssignment, error) {
	ret := _m.Called(menteeId, assignmentId)

	var r0 *domain.MenteeAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*domain.MenteeAssignment, error)); ok {
		return rf(menteeId, assignmentId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.MenteeAssignment); ok {
		r0 = rf(menteeId, assignmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MenteeAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(menteeId, assignmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: assignmentId, assignmentDomain
func (_m *MenteeAssignmentUsecase) Update(assignmentId string, assignmentDomain *domain.MenteeAssignment) error {
	ret := _m.Called(assignmentId, assignmentDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.MenteeAssignment) error); ok {
		r0 = rf(assignmentId, assignmentDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMenteeAssignmentUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenteeAssignmentUsecase creates a new instance of MenteeAssignmentUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenteeAssignmentUsecase(t mockConstructorTestingTNewMenteeAssignmentUsecase) *MenteeAssignmentUsecase {
	mock := &MenteeAssignmentUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
