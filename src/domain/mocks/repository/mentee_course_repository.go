// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/superosystem/trainingsystem-backend/src/domain"
)

// MenteeCourseRepository is an autogenerated mock type for the MenteeCourseRepository type
type MenteeCourseRepository struct {
	mock.Mock
}

// CheckEnrollment provides a mock function with given fields: menteeId, courseId
func (_m *MenteeCourseRepository) CheckEnrollment(menteeId string, courseId string) (*domain.MenteeCourse, error) {
	ret := _m.Called(menteeId, courseId)

	var r0 *domain.MenteeCourse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*domain.MenteeCourse, error)); ok {
		return rf(menteeId, courseId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.MenteeCourse); ok {
		r0 = rf(menteeId, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MenteeCourse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(menteeId, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnrolledCourse provides a mock function with given fields: menteeId, courseId
func (_m *MenteeCourseRepository) DeleteEnrolledCourse(menteeId string, courseId string) error {
	ret := _m.Called(menteeId, courseId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(menteeId, courseId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Enroll provides a mock function with given fields: menteeCourseDomain
func (_m *MenteeCourseRepository) Enroll(menteeCourseDomain *domain.MenteeCourse) error {
	ret := _m.Called(menteeCourseDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.MenteeCourse) error); ok {
		r0 = rf(menteeCourseDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindCoursesByMentee provides a mock function with given fields: menteeId, title, status
func (_m *MenteeCourseRepository) FindCoursesByMentee(menteeId string, title string, status string) (*[]domain.MenteeCourse, error) {
	ret := _m.Called(menteeId, title, status)

	var r0 *[]domain.MenteeCourse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*[]domain.MenteeCourse, error)); ok {
		return rf(menteeId, title, status)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *[]domain.MenteeCourse); ok {
		r0 = rf(menteeId, title, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.MenteeCourse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(menteeId, title, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: menteeId, courseId, menteeCourseDomain
func (_m *MenteeCourseRepository) Update(menteeId string, courseId string, menteeCourseDomain *domain.MenteeCourse) error {
	ret := _m.Called(menteeId, courseId, menteeCourseDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *domain.MenteeCourse) error); ok {
		r0 = rf(menteeId, courseId, menteeCourseDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMenteeCourseRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenteeCourseRepository creates a new instance of MenteeCourseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenteeCourseRepository(t mockConstructorTestingTNewMenteeCourseRepository) *MenteeCourseRepository {
	mock := &MenteeCourseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
