// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/superosystem/trainingsystem-backend/src/domain"
)

// MentorRepository is an autogenerated mock type for the MentorRepository type
type MentorRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: mentorDomain
func (_m *MentorRepository) Create(mentorDomain *domain.Mentor) error {
	ret := _m.Called(mentorDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Mentor) error); ok {
		r0 = rf(mentorDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *MentorRepository) FindAll() (*[]domain.Mentor, error) {
	ret := _m.Called()

	var r0 *[]domain.Mentor
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]domain.Mentor, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]domain.Mentor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Mentor)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *MentorRepository) FindById(id string) (*domain.Mentor, error) {
	ret := _m.Called(id)

	var r0 *domain.Mentor
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Mentor, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Mentor); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Mentor)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdUser provides a mock function with given fields: userId
func (_m *MentorRepository) FindByIdUser(userId string) (*domain.Mentor, error) {
	ret := _m.Called(userId)

	var r0 *domain.Mentor
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Mentor, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Mentor); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Mentor)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, mentorDomain
func (_m *MentorRepository) Update(id string, mentorDomain *domain.Mentor) error {
	ret := _m.Called(id, mentorDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.Mentor) error); ok {
		r0 = rf(id, mentorDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMentorRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMentorRepository creates a new instance of MentorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMentorRepository(t mockConstructorTestingTNewMentorRepository) *MentorRepository {
	mock := &MentorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
