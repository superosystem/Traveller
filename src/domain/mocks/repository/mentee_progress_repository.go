// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/superosystem/trainingsystem-backend/src/domain"
	mock "github.com/stretchr/testify/mock"
)

// MenteeProgressRepository is an autogenerated mock type for the MenteeProgressRepository type
type MenteeProgressRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: menteeProgressDomain
func (_m *MenteeProgressRepository) Add(menteeProgressDomain *domain.MenteeProgress) error {
	ret := _m.Called(menteeProgressDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.MenteeProgress) error); ok {
		r0 = rf(menteeProgressDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields: menteeId, title, status
func (_m *MenteeProgressRepository) Count(menteeId string, title string, status string) ([]int64, error) {
	ret := _m.Called(menteeId, title, status)

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]int64, error)); ok {
		return rf(menteeId, title, status)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []int64); ok {
		r0 = rf(menteeId, title, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(menteeId, title, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMenteeProgressesByCourse provides a mock function with given fields: menteeId, courseId
func (_m *MenteeProgressRepository) DeleteMenteeProgressesByCourse(menteeId string, courseId string) error {
	ret := _m.Called(menteeId, courseId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(menteeId, courseId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByMaterial provides a mock function with given fields: menteeId, materialId
func (_m *MenteeProgressRepository) FindByMaterial(menteeId string, materialId string) (*domain.MenteeProgress, error) {
	ret := _m.Called(menteeId, materialId)

	var r0 *domain.MenteeProgress
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*domain.MenteeProgress, error)); ok {
		return rf(menteeId, materialId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.MenteeProgress); ok {
		r0 = rf(menteeId, materialId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MenteeProgress)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(menteeId, materialId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByMentee provides a mock function with given fields: menteeId, courseId
func (_m *MenteeProgressRepository) FindByMentee(menteeId string, courseId string) ([]domain.MenteeProgress, error) {
	ret := _m.Called(menteeId, courseId)

	var r0 []domain.MenteeProgress
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]domain.MenteeProgress, error)); ok {
		return rf(menteeId, courseId)
	}
	if rf, ok := ret.Get(0).(func(string, string) []domain.MenteeProgress); ok {
		r0 = rf(menteeId, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MenteeProgress)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(menteeId, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMenteeProgressRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenteeProgressRepository creates a new instance of MenteeProgressRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenteeProgressRepository(t mockConstructorTestingTNewMenteeProgressRepository) *MenteeProgressRepository {
	mock := &MenteeProgressRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
