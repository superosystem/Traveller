// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/superosystem/trainingsystem-backend/src/domain"
	mock "github.com/stretchr/testify/mock"
)

// ModuleRepository is an autogenerated mock type for the ModuleRepository type
type ModuleRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: moduleDomain
func (_m *ModuleRepository) Create(moduleDomain *domain.Module) error {
	ret := _m.Called(moduleDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Module) error); ok {
		r0 = rf(moduleDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: moduleId
func (_m *ModuleRepository) Delete(moduleId string) error {
	ret := _m.Called(moduleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(moduleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByCourse provides a mock function with given fields: courseId
func (_m *ModuleRepository) FindByCourse(courseId string) ([]domain.Module, error) {
	ret := _m.Called(courseId)

	var r0 []domain.Module
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Module, error)); ok {
		return rf(courseId)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Module); ok {
		r0 = rf(courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Module)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: moduleId
func (_m *ModuleRepository) FindById(moduleId string) (*domain.Module, error) {
	ret := _m.Called(moduleId)

	var r0 *domain.Module
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Module, error)); ok {
		return rf(moduleId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Module); ok {
		r0 = rf(moduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Module)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(moduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: moduleId, moduleDomain
func (_m *ModuleRepository) Update(moduleId string, moduleDomain *domain.Module) error {
	ret := _m.Called(moduleId, moduleDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.Module) error); ok {
		r0 = rf(moduleId, moduleDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewModuleRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewModuleRepository creates a new instance of ModuleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewModuleRepository(t mockConstructorTestingTNewModuleRepository) *ModuleRepository {
	mock := &ModuleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
