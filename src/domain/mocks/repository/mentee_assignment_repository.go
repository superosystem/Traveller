// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/superosystem/trainingsystem-backend/src/domain"
)

// MenteeAssignmentRepository is an autogenerated mock type for the MenteeAssignmentRepository type
type MenteeAssignmentRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: assignmentMenteeDomain
func (_m *MenteeAssignmentRepository) Create(assignmentMenteeDomain *domain.MenteeAssignment) error {
	ret := _m.Called(assignmentMenteeDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.MenteeAssignment) error); ok {
		r0 = rf(assignmentMenteeDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: assignmentMenteeId
func (_m *MenteeAssignmentRepository) Delete(assignmentMenteeId string) error {
	ret := _m.Called(assignmentMenteeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(assignmentMenteeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByAssignmentId provides a mock function with given fields: assignmentId, limit, offset
func (_m *MenteeAssignmentRepository) FindByAssignmentId(assignmentId string, limit int, offset int) ([]domain.MenteeAssignment, int, error) {
	ret := _m.Called(assignmentId, limit, offset)

	var r0 []domain.MenteeAssignment
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]domain.MenteeAssignment, int, error)); ok {
		return rf(assignmentId, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []domain.MenteeAssignment); ok {
		r0 = rf(assignmentId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MenteeAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int); ok {
		r1 = rf(assignmentId, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(assignmentId, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByCourse provides a mock function with given fields: menteeId, courseId
func (_m *MenteeAssignmentRepository) FindByCourse(menteeId string, courseId string) (*domain.MenteeAssignment, error) {
	ret := _m.Called(menteeId, courseId)

	var r0 *domain.MenteeAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*domain.MenteeAssignment, error)); ok {
		return rf(menteeId, courseId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.MenteeAssignment); ok {
		r0 = rf(menteeId, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MenteeAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(menteeId, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCourses provides a mock function with given fields: menteeId, courseIds
func (_m *MenteeAssignmentRepository) FindByCourses(menteeId string, courseIds []string) (*[]domain.MenteeAssignment, error) {
	ret := _m.Called(menteeId, courseIds)

	var r0 *[]domain.MenteeAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (*[]domain.MenteeAssignment, error)); ok {
		return rf(menteeId, courseIds)
	}
	if rf, ok := ret.Get(0).(func(string, []string) *[]domain.MenteeAssignment); ok {
		r0 = rf(menteeId, courseIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.MenteeAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(menteeId, courseIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: assignmentMenteeId
func (_m *MenteeAssignmentRepository) FindById(assignmentMenteeId string) (*domain.MenteeAssignment, error) {
	ret := _m.Called(assignmentMenteeId)

	var r0 *domain.MenteeAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.MenteeAssignment, error)); ok {
		return rf(assignmentMenteeId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.MenteeAssignment); ok {
		r0 = rf(assignmentMenteeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MenteeAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(assignmentMenteeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByMenteeId provides a mock function with given fields: menteeId
func (_m *MenteeAssignmentRepository) FindByMenteeId(menteeId string) ([]domain.MenteeAssignment, error) {
	ret := _m.Called(menteeId)

	var r0 []domain.MenteeAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.MenteeAssignment, error)); ok {
		return rf(menteeId)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.MenteeAssignment); ok {
		r0 = rf(menteeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MenteeAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(menteeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMenteeAssignmentEnrolled provides a mock function with given fields: menteeId, assignmentId
func (_m *MenteeAssignmentRepository) FindMenteeAssignmentEnrolled(menteeId string, assignmentId string) (*domain.MenteeAssignment, error) {
	ret := _m.Called(menteeId, assignmentId)

	var r0 *domain.MenteeAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*domain.MenteeAssignment, error)); ok {
		return rf(menteeId, assignmentId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.MenteeAssignment); ok {
		r0 = rf(menteeId, assignmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MenteeAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(menteeId, assignmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: assignmentMenteeId, assignmentMenteeDomain
func (_m *MenteeAssignmentRepository) Update(assignmentMenteeId string, assignmentMenteeDomain *domain.MenteeAssignment) error {
	ret := _m.Called(assignmentMenteeId, assignmentMenteeDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.MenteeAssignment) error); ok {
		r0 = rf(assignmentMenteeId, assignmentMenteeDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMenteeAssignmentRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenteeAssignmentRepository creates a new instance of MenteeAssignmentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenteeAssignmentRepository(t mockConstructorTestingTNewMenteeAssignmentRepository) *MenteeAssignmentRepository {
	mock := &MenteeAssignmentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
