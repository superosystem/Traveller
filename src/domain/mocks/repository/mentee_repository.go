// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/superosystem/trainingsystem-backend/src/domain"
)

// MenteeRepository is an autogenerated mock type for the MenteeRepository type
type MenteeRepository struct {
	mock.Mock
}

// CountByCourse provides a mock function with given fields: courseId
func (_m *MenteeRepository) CountByCourse(courseId string) (int64, error) {
	ret := _m.Called(courseId)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(courseId)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(courseId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: menteeDomain
func (_m *MenteeRepository) Create(menteeDomain *domain.Mentee) error {
	ret := _m.Called(menteeDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Mentee) error); ok {
		r0 = rf(menteeDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *MenteeRepository) FindAll() (*[]domain.Mentee, error) {
	ret := _m.Called()

	var r0 *[]domain.Mentee
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]domain.Mentee, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]domain.Mentee); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Mentee)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCourse provides a mock function with given fields: courseId, limit, offset
func (_m *MenteeRepository) FindByCourse(courseId string, limit int, offset int) (*[]domain.Mentee, int, error) {
	ret := _m.Called(courseId, limit, offset)

	var r0 *[]domain.Mentee
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) (*[]domain.Mentee, int, error)); ok {
		return rf(courseId, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) *[]domain.Mentee); ok {
		r0 = rf(courseId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Mentee)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int); ok {
		r1 = rf(courseId, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(courseId, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindById provides a mock function with given fields: id
func (_m *MenteeRepository) FindById(id string) (*domain.Mentee, error) {
	ret := _m.Called(id)

	var r0 *domain.Mentee
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Mentee, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Mentee); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Mentee)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdUser provides a mock function with given fields: userId
func (_m *MenteeRepository) FindByIdUser(userId string) (*domain.Mentee, error) {
	ret := _m.Called(userId)

	var r0 *domain.Mentee
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Mentee, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Mentee); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Mentee)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, menteeDomain
func (_m *MenteeRepository) Update(id string, menteeDomain *domain.Mentee) error {
	ret := _m.Called(id, menteeDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.Mentee) error); ok {
		r0 = rf(id, menteeDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMenteeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenteeRepository creates a new instance of MenteeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenteeRepository(t mockConstructorTestingTNewMenteeRepository) *MenteeRepository {
	mock := &MenteeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
