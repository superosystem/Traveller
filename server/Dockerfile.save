# Use the official lightweight Python image.
# https://hub.docker.com/_/python
FROM python:3.9-slim

# Allow statements and log messages to immediately appear in the Knative logs
ENV PYTHONUNBUFFERED True

# Copy local code to the container image.
ENV APP_HOME /app
WORKDIR $APP_HOME
COPY . ./

# Install production dependencies.
RUN pip install --upgrade pip
RUN pip install -r requirements.txt
Jika Anda mendapatkan pesan kesalahan bahwa "gunicorn not found" saat menjalankan kontainer dari gambar Docker yang Anda bangun, ini mungkin disebabkan oleh fakta bahwa gunicorn tidak terinstal di dalam gambar Docker Anda. Anda perlu memastikan bahwa gunicorn diinstal di dalam gambar Docker selama proses pembuatan gambar.

Anda dapat memperbarui Dockerfile Anda untuk memastikan bahwa gunicorn diinstal. Perbarui bagian instalasi dependensi produksi dengan menambahkan gunicorn ke dalamnya. Berikut adalah bagaimana Anda bisa melakukannya:

```Dockerfile
# Gunakan gambar Python resmi yang ringan.
# https://hub.docker.com/_/python
FROM python:3.9-slim

# Memungkinkan pernyataan dan pesan log muncul langsung di log Knative
ENV PYTHONUNBUFFERED True

# Menyalin kode lokal ke dalam gambar kontainer.
ENV APP_HOME /app
WORKDIR $APP_HOME
COPY . ./

# Menginstal dependensi produksi.
RUN pip install --upgrade pip
RUN pip install -r requirements.txt
RUN pip install gunicorn  # Tambahkan ini untuk menginstal gunicorn

# Menjalankan layanan web saat kontainer dimulai. Di sini kami menggunakan server web gunicorn,
# dengan satu proses pekerja dan 8 utas.
# Untuk lingkungan dengan beberapa core CPU, tingkatkan jumlah pekerja
# agar sama dengan jumlah core yang tersedia.
# Timeouts diatur ke 0 untuk menonaktifkan waktu tunggu pekerja untuk memungkinkan Cloud Run mengelola penskalaan instance.
CMD exec gunicorn --bind :$PORT --workers 1 --threads 8 --timeout 0 main:app
```

Pastikan Anda menyimpan perubahan pada Dockerfile Anda setelah memperbarui dan kemudian bangun kembali gambar Docker dengan perintah `docker build`.

```sh
docker build -t my-python-app .
```

Setelah Anda membangun gambar Docker yang diperbarui, Anda dapat menjalankannya di dalam kontainer:

```sh
docker run -p 8080:8080 my-python-app
```

Pastikan Anda menjalankan perintah `docker run` dengan opsi port yang sesuai untuk aplikasi Anda. Ini akan memungkinkan akses ke aplikasi Flask di dalam kontainer melalui port 8080 pada host lokal Anda.

# Run the web service on container startup. Here we use the gunicorn
# webserver, with one worker process and 8 threads.
# For environments with multiple CPU cores, increase the number of workers
# to be equal to the cores available.
# Timeout is set to 0 to disable the timeouts of the workers to allow Cloud Run to handle instance scaling.
CMD exec gunicorn --bind :$PORT --workers 1 --threads 8 --timeout 0 main:app
